
"=========================================
"===  Edited by dingding, 2023.11.14   ===
"===   If you wanna commentary in EN   ===
"=== Contact me at dingdluan@gmail.com ===
"=========================================

"=================================================
" Repository url:
"   https://github.com/DingdingLuan/dingding_vim
"=================================================



filetype off
call plug#begin('~/.vim/bundle')
" Use release branch (Recommend)
"  before this, you should:
"   On linux: 
"   	curl -sL install-node.now.sh/lts | bash
"   On mac:
"   	brew install nodejs yarn
Plug 'neoclide/coc.nvim', {'branch': 'release'}    
call plug#end()

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'gmarik/Vundle.vim'
Plugin 'tmhedberg/SimpylFold'
Plugin 'vim-scripts/indentpython.vim'
Plugin 'kien/ctrlp.vim'
"Plugin 'scrooloose/syntastic'
Plugin 'nvie/vim-flake8'
Plugin 'godlygeek/tabular'
call vundle#end()
filetype plugin indent on
set splitbelow
set splitright
set foldmethod=indent
set foldlevel=99
nnoremap <space> za

let g:SimpylFold_docstring_preview=1
" python:
au BufNewFile,BufRead *.py
\ set tabstop=4	|
\ set softtabstop=4	|
\ set shiftwidth=4	|
\ set textwidth=79	|
\ set expandtab	|
\ set autoindent	|
\ set fileformat=unix	|
\ nnoremap<silent> <c-b> <Esc>:w<CR>:!clear;python % <CR>|
"\ nnoremap <buffer> <c-b> :exec '!python' shellescape(@%, 1)<cr> |
"python代码ctrl+b一键编译


" python 代码高亮
let python_hightlight_all=1
" 全栈开发
au BufNewFile,BufRead *.js, *.html, *.css
\ set tabstop=2	|
\ set softtabstop=2	|
\ set shiftwidth=2	|
" 避免出现多余空白字符
" au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/
set encoding=utf-8

"访问系统剪贴板
set clipboard=unnamed
"开启全屏模式

set modelines=0		" CVE-2007-2438
" Normally we use vim-extensions. If you want true vi-compatibility
" remove change the following statements
set nocompatible	" Use Vim defaults instead of 100% vi compatibility
set backspace=2		" more powerful backspacing



set nowritebackup nobackup
set showmatch         " 高亮显示对应的括号
set number            " 显示行号
set mouse-=a 
set selection=exclusive 
"set lines=50 columns=90
set ruler						" 显示光标当前位置（右下角）
set laststatus=2		" 总是显示状态栏

set tabstop=2
set shiftwidth=2
set autoindent
set autowrite
set foldenable
set foldmethod=syntax
set incsearch
set hlsearch
"colorscheme synthwave
colorscheme potato
syntax on
:inoremap ( ()<ESC>i
:inoremap { {}<ESC>i
:inoremap [ []<ESC>i
:inoremap " ""<ESC>i
:inoremap ' ''<ESC>i
:inoremap < <><ESC>i
set autoread
set foldenable
set t_Co=256 " required
"map <F3> :NERDTreeMirror<CR>
"map <F3> :NERDTreeToggle<CR>
map <C-n> :NERDTreeMirror<CR>
map <C-n> :NERDTreeToggle<CR>


"fortran


let s:extfname= expand("%:e")
if s:extfname==? "f90"
    let fortran_free_source=1
    unlet! fortran_fixed_source
		nnoremap<silent> <c-b> <CR><Esc>:w !file='%';filename=`basename $file .f90`;gfortran $file -o $filename<CR>
		"nnoremap<silent> <c-b> <CR><Esc>:w !file='%';filename=`basename $file .f90`;file_path=`pwd`;ifort $file_path/$file -o $file_path/$filename<CR>
	else
    let fortran_fixed_source=1
    unlet! fortran_free_source
endif
let fortran_more_precise=1
let fortran_do_enddo=1
"去掉固定格式每行开头的红色填充
let fortran_have_tabs=1
set foldmethod=syntax

" neocomplcache对vim version>8.2不支持, 所以舍弃了
"" neocomplcache的补全设置
"let g:neocomplcache_enable_at_startup=1
"let g:neocomplcache_enable_smart_case=1
"inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
"let g:neocomplcache_enable_auto_select=1

" nerd_commenter注释
let mapleader=","
map <c-t> ,cc
map <c-r> ,cu

" 配置powerline 内嵌视图
"set laststatus=2
"set t_Co=256
"python from powerline.vim import setup as powerline_setup
"python powerline_setup()
"python del powerline_setup

" ctl+H一键关闭高亮
noremap n :set hlsearch<cr>n
noremap N :set hlsearch<cr>N
noremap / :set hlsearch<cr>/
noremap ? :set hlsearch<cr>?
noremap * *:set hlsearch<cr>

nnoremap <c-h> :call DisableHighlight()<cr>
function! DisableHighlight()
    set nohlsearch
endfunc


"Comman 全局复制粘贴操作
map <C-A> ggVG
map! <C-A> <Esc> ggVGY
"放弃了复制粘贴，因为和V-block模式冲突了
"map <C-v> "+gp
"map <C-c> "+y
"imap <C-v> <Esc> "+gp


set rtp+=/root/miniconda3/lib/python3.9/site-packages/powerline/bindings/vim
set laststatus=2
set encoding=utf-8
set t_Co=256
set number
set fillchars+=stl:\ ,stlnc:\
set term=xterm-256color
set termencoding=utf-8
set background=dark

hi Normal guibg=NONE ctermbg=NONE


" 设置 'Ctrl+Shift+A' 
" 为 'Tabularize /' 的快捷键
" 后续自己添加一下对其符号即可
" win linux和mac都通用
vmap <C-S-a> :Tabularize /


" 设置自动补全插件coc
"" --------------------------- coc start --------------------------------
"" May need for Vim (not Neovim) since coc.nvim calculates byte offset by count
"" utf-8 byte sequence
"set encoding=utf-8
"" Some servers have issues with backup files, see #649
"set nobackup
"set nowritebackup
"" Having longer updatetime (default is 4000 ms = 4s) leads to noticeable
"" delays and poor user experience
"set updatetime=300
"" Always show the signcolumn, otherwise it would shift the text each time
"" diagnostics appear/become resolved
"set signcolumn=yes
"" Use tab for trigger completion with characters ahead and navigate
"" NOTE: There's always complete item selected by default, you may want to enable
"" no select by `"suggest.noselect": true` in your configuration file
"" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
"" other plugin before putting this into your config
"inoremap <silent><expr> <TAB>
      "\ coc#pum#visible() ? coc#pum#next(1) :
      "\ CheckBackspace() ? "\<Tab>" :
      "\ coc#refresh()
"inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"
"" Make <CR> to accept selected completion item or notify coc.nvim to format
"" <C-g>u breaks current undo, please make your own choice
"inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              "\: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
"function! CheckBackspace() abort
  "let col = col('.') - 1
  "return !col || getline('.')[col - 1]  =~# '\s'
"endfunction
"" Use <c-space> to trigger completion
"if has('nvim')
  "inoremap <silent><expr> <c-space> coc#refresh()
"else
  "inoremap <silent><expr> <c-@> coc#refresh()
"endif
"" Use `[g` and `]g` to navigate diagnostics
"" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list
"nmap <silent> [g <Plug>(coc-diagnostic-prev)
"nmap <silent> ]g <Plug>(coc-diagnostic-next)
"" GoTo code navigation
"nmap <silent> gd <Plug>(coc-definition)
"nmap <silent> gy <Plug>(coc-type-definition)
"nmap <silent> gi <Plug>(coc-implementation)
"nmap <silent> gr <Plug>(coc-references)
"" Use K to show documentation in preview window
"nnoremap <silent> K :call ShowDocumentation()<CR>
"function! ShowDocumentation()
  "if CocAction('hasProvider', 'hover')
    "call CocActionAsync('doHover')
  "else
    "call feedkeys('K', 'in')
  "endif
"endfunction
"" Highlight the symbol and its references when holding the cursor
"autocmd CursorHold * silent call CocActionAsync('highlight')
"" Symbol renaming
"nmap <leader>rn <Plug>(coc-rename)
"" Formatting selected code
"xmap <leader>f  <Plug>(coc-format-selected)
"nmap <leader>f  <Plug>(coc-format-selected)
"augroup mygroup
  "autocmd!
  "" Setup formatexpr specified filetype(s)
  "autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  "" Update signature help on jump placeholder
  "autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
"augroup end
"" Applying code actions to the selected code block
"" Example: `<leader>aap` for current paragraph
"xmap <leader>a  <Plug>(coc-codeaction-selected)
"nmap <leader>a  <Plug>(coc-codeaction-selected)
"" Remap keys for applying code actions at the cursor position
"nmap <leader>ac  <Plug>(coc-codeaction-cursor)
"" Remap keys for apply code actions affect whole buffer
"nmap <leader>as  <Plug>(coc-codeaction-source)
"" Apply the most preferred quickfix action to fix diagnostic on the current line
"nmap <leader>qf  <Plug>(coc-fix-current)
"" Remap keys for applying refactor code actions
"nmap <silent> <leader>re <Plug>(coc-codeaction-refactor)
"xmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)
"nmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)
"" Run the Code Lens action on the current line
"nmap <leader>cl  <Plug>(coc-codelens-action)
"" Map function and class text objects
"" NOTE: Requires 'textDocument.documentSymbol' support from the language server
"xmap if <Plug>(coc-funcobj-i)
"omap if <Plug>(coc-funcobj-i)
"xmap af <Plug>(coc-funcobj-a)
"omap af <Plug>(coc-funcobj-a)
"xmap ic <Plug>(coc-classobj-i)
"omap ic <Plug>(coc-classobj-i)
"xmap ac <Plug>(coc-classobj-a)
"omap ac <Plug>(coc-classobj-a)
"" Remap <C-f> and <C-b> to scroll float windows/popups
"if has('nvim-0.4.0') || has('patch-8.2.0750')
  "nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  "nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  "inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  "inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  "vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  "vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
"endif
"" Use CTRL-S for selections ranges
"" Requires 'textDocument/selectionRange' support of language server
"nmap <silent> <C-s> <Plug>(coc-range-select)
"xmap <silent> <C-s> <Plug>(coc-range-select)
"" Add `:Format` command to format current buffer
"command! -nargs=0 Format :call CocActionAsync('format')
"" Add `:Fold` command to fold current buffer
"command! -nargs=? Fold :call     CocAction('fold', <f-args>)
"" Add `:OR` command for organize imports of the current buffer
"command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')
"" Add (Neo)Vim's native statusline support
"" NOTE: Please see `:h coc-status` for integrations with external plugins that
"" provide custom statusline: lightline.vim, vim-airline
"set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
"" Mappings for CoCList
"" Show all diagnostics
"nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
"" Manage extensions
"nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
"" Show commands
"nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
"" Find symbol of current document
"nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
"" Search workspace symbols
"nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
"" Do default action for next item
"nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
"" Do default action for previous item
"nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
"" Resume latest coc list
"nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>
""" --------------------------- coc end --------------------------------
